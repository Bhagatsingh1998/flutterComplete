2.26. Using Private Properties
every dart file can be called mini librarry and we can split our code in more than one file and we can put a restrictic what all can be exported from the particular file  

main


2.25. A Brief Look Under The Hood
what flutter does when setState is executed?
setState is the function that forces flutter to re-render the user interface, however not the entire UI. in the end it calls build function again of this widget. 
rn, it calls build for entire app. but once there are more custom widgets at that time rendering whole UI will make a difference. but flutter is smart, it will not re-render the stuff which is not changed.
---

2.24. Stateful & Stateless Widgets
---

2.23. Updating Correctly with Stateful Widgets
main

2.22. [DART DEEP DIVE] Understanding Lists
---

2.21. Updating Widget Data (Or Using StatelessWidget Incorrectly)
display the real question which in list and once the button is pressed next question should be displyed

main 

we are getting correct output but question is not getting changed in ui.

2.20. Anonymous Functions
main

2.19. Connecting Functions & Buttons
main

2.18. Widget Basics
---

2.17. Adding Layout Widgets
main

2.16. Visible (Input  Output) & Invisible (Layout  Control) Widgets
---

2.15. Building a Widget Tree
main

2.14. Flutter App Basics
---

2.13. First Summary & Additional Syntax
explain the code of 'main'

main

2.12. Class Constructors & Named Arguments
basics

2.11. Running the App on an Emulator
main :  main() 


2.10. Building an App From Scratch
main.dart : class

2.9. Dart Fundamentals
---

2.8. Dart Basics - Summary
---

2.7. More Dart Basics
basics.dart


2.6. Dart Basics
to run dart code, add the path in environement varaiables ie flutter\bin\cache\dart-sdk\bin
OR
https://dartpad.dev/

basics.dart

2.5. Analyzing the Default App
lib/main.dart : Explaining the code little bit
lib/main.dart : making file empty


2.4. More on Git (Version Control System)
---

2.3. An Overview of the Generated Files & Folders
.idea :
  1. it holds the configration for Android Studio. thus, it matter to us and nothing should be changed there.

.vscode :
  1. it will be present if u add some extra configration to vscode within this project

android : 
  1. it is super important, it holds complete android project as u could also create it without Flutter.
  2. this folder at the end which Flutter SDK will use to merge with the flutter code. so when flutter code gets compliled to native code, it will bassically injected into this android project folder.
  3. this folder will be gets build into real android app. (app which we can see in virtual device)
  4. thus, its a folder which is imp but no work is done in this folder or ver rarely.

build : 
  1. it is also important folder which holds the output of flutter appliaction.
  2. this folder will be generated and managed by flutter SDK and it contains some java or android files.
  3. nothing should be change here and it will get updated when building app for deployment
  
ios : 
  1. it is same as android folder. this folder is responsible for creating ios app.
  2. it holds normal xcode project, xcode is normal development environement of macOs
  3. for windows users, its not much of use as ios appliaction cant development on windows.

lib : 
  1. lib stands for library
  2. this is the folder where 99% of work will be done. hre we will add all out dart files.
    dart: its a programming lang which flutter uses to write the code for flutter application.

test : 
  1. it will be not much important. it allows us to write test for our app, automated test.

.gitignore :
  1. its a file used when using git (souce code management tool)

.metadata :
  1. we will not work on it, it will be managed by Flutter.
  2. Flutter tool simply save some infornation in here which is needed to build ourr app correctly.

.packages  :
  1. its not a file we will work on, it i automatically generated bu flutter SDK
  2. manages internal depedencies and some packages

my_first_app.iml (a file with project name) :  
  1. we will not work in this file
  2. managed by flutter SDK to manage soem internal depedencies and setting fro this project

pubspec.yaml : 
  1. in this file, we will work.
  2. this files allows us to mostly manage these depedencies of the project.
    what it mean?
    it means that here congigure which other 3rd party packages our project will be using.
  3. alos manages other things like fonts, images which we can use
  4. here code is written in yaml which is in certain format for structuring text files and indentation is important
  5. thus, is a congig file which allows us to config our app.

pubspec.lock :
  1. in this file also we will not work
  2. it is automatically generated by 'pubspec.yaml' file ad it holds more details about all the depedencies our app have

README.md  :
  1. automatically generated file which cintains the description of our pproject.
  2. it can be used in git, if we use git.